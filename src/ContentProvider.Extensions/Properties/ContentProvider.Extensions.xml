<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContentProvider.Extensions</name>
    </assembly>
    <members>
        <member name="T:ContentProvider.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.CannotAssignInternalContentSet">
            <summary>
              Looks up a localized string similar to Cannot assign the internal content set property..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.InvalidBaseDirectory">
            <summary>
              Looks up a localized string similar to Specify a valid base directory..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.InvalidContentSetName">
            <summary>
              Looks up a localized string similar to Specify a valid name for the content set..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.InvalidFileExtension">
            <summary>
              Looks up a localized string similar to Specify a valid file extension..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.InvalidRootNamespace">
            <summary>
              Looks up a localized string similar to Specify a valid root namespace for the embedded resources..
            </summary>
        </member>
        <member name="M:ContentProvider.ServiceCollectionExtensions.AddContent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ContentProvider.ContentBuilder})">
            <summary>
                Registers content from one or more sources that can be injected into the application.
                <para/>
                This method does not associate the content with a specific type, so to access it later,
                you must inject a <see cref="T:ContentProvider.IContentManager"/> instance and use it's
                <see cref="M:ContentProvider.IContentManager.GetContentSet(System.String)"/> to get this content set by name.
            </summary>
            <param name="services">The services collection.</param>
            <param name="name">
                A name that can be used to reference this content when accessing through an injected
                <see cref="T:ContentProvider.IContentManager"/>.
            </param>
            <param name="sourceBuilder">
                A function used to set up the source for the content, along with any fallback sources.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="services"/> or <paramref name="sourceBuilder"/> parameters
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the <paramref name="name"/> parameter is <c>null</c>, empty or whitespaces.
            </exception>
        </member>
        <member name="M:ContentProvider.ServiceCollectionExtensions.AddContent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ContentProvider.ContentBuilder})">
            <summary>
                Registers content from one or more sources that can be injected into the application.
                <para/>
                This method associates the content with a specific <see cref="T:ContentProvider.ContentSetBase"/> type, so
                to access it later, you can simply inject the <typeparamref name="TContentSet"/> type
                into your code.
            </summary>
            <typeparam name="TContentSet">
                The content set class to register with the DI container.
            </typeparam>
            <param name="services">The services collection.</param>
            <param name="name">
                A name that can be used to reference this content when accessing through an injected
                <see cref="T:ContentProvider.IContentManager"/>.
            </param>
            <param name="sourceBuilder">
                A function used to set up the source for the content, along with any fallback sources.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="services"/> or <paramref name="sourceBuilder"/> parameters
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown if the <paramref name="name"/> parameter is <c>null</c>, empty or whitespaces.
            </exception>
        </member>
        <member name="M:ContentProvider.ServiceCollectionExtensions.AddFileContent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String)">
            <summary>
                Shortcut method to register content from files on the file system.
            </summary>
            <typeparam name="TContentSet">
                The content set class to register with the DI container.
            </typeparam>
            <param name="services">The services collection.</param>
            <param name="fileExtension">
                The file extension of the files to register. If multiple file extensions are needed, use
                the advanced <see cref="M:ContentProvider.ServiceCollectionExtensions.AddContent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ContentProvider.ContentBuilder})"/>
                or <see cref="M:ContentProvider.ServiceCollectionExtensions.AddContent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ContentProvider.ContentBuilder})"/>
                methods to have more control on the content that is added.
            </param>
            <param name="baseDirectory">
                The base directory under which to find the file content.
                <para/>
                If not specified, the current directory will be used.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:ContentProvider.ServiceCollectionExtensions.AddResourceContent``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String)">
            <summary>
                Shortcut method to register content from embedded resources in the assembly where the
                type argument <typeparamref name="TContentSet"/> is contained.
            </summary>
            <typeparam name="TContentSet">
                The content set class to register with the DI container.
            </typeparam>
            <param name="services">The services collection.</param>
            <param name="fileExtension">
                The file extension of the resources to register.
            </param>
            <param name="rootNamespace">
                The root namespace of the embedded resources. This part will be stripped from the
                content name.
                <para/>
                If not specified, the namespace of the content set type
                (<typeparamref name="TContentSet"/>) will be used.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:ContentProvider.ServiceCollectionExtensions.AddFileContentWithResourcesFallback``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String)">
            <summary>
                Shortcut method to register content from files on the file system, with a fallback to
                embedded resources if the file does not exist.
                <para/>
                This method will take care to normalize the content names for the files and resources,
                so that they match each other, thereby allowing for a clean fallback.
            </summary>
            <typeparam name="TContentSet">
                The content set class to register with the DI container.
            </typeparam>
            <param name="services">The services collection.</param>
            <param name="fileExtension">
                The file extension of the files and resources to register.
            </param>
            <param name="baseDirectory">
                The base directory under which to find the file content. This should follow the same
                hierarchy as the embedded resources to work correctly.
                <para/>
                If not specified, the current directory will be used.
            </param>
            <param name="rootNamespace">
                The root namespace of the embedded resources. This part will be stripped from the
                content name.
                <para/>
                If not specified, the namespace of the content set type
                (<typeparamref name="TContentSet"/>) will be used.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
    </members>
</doc>
