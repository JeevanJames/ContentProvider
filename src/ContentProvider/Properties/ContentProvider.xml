<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContentProvider</name>
    </assembly>
    <members>
        <member name="M:ContentProvider.ContentManager.GetContentSet(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ContentProvider.ContentManager.GetContentSet``1">
            <inheritdoc/>
        </member>
        <member name="M:ContentProvider.ContentManager.GetContentSet``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:ContentProvider.ContentManager.Global">
            <summary>
                Gets a pre-instatiated global instance of <see cref="T:ContentProvider.ContentManager"/>.
            </summary>
        </member>
        <member name="T:ContentProvider.ContentSet">
            <inheritdoc/>
        </member>
        <member name="P:ContentProvider.ContentSet.Sources">
            <summary>
                Gets the list of content sources registered with this content set.
            </summary>
        </member>
        <member name="M:ContentProvider.ContentSet.GetAsStringAsync(System.String)">
            <inheritdoc />
            <exception cref="T:ContentProvider.ContentException">
                Thrown if content with the specified <paramref name="name"/> is not found in any of the
                registered sources.
            </exception>
        </member>
        <member name="M:ContentProvider.ContentSet.GetAsBinaryAsync(System.String)">
            <inheritdoc />
            <exception cref="T:ContentProvider.ContentException">
                Thrown if content with the specified <paramref name="name"/> is not found in any of the
                registered sources.
            </exception>
        </member>
        <member name="M:ContentProvider.ContentSet.GetAsString(System.String)">
            <inheritdoc />
            <exception cref="T:ContentProvider.ContentException">
                Thrown if content with the specified <paramref name="name"/> is not found in any of the
                registered sources.
            </exception>
        </member>
        <member name="M:ContentProvider.ContentSet.GetAsBinary(System.String)">
            <inheritdoc />
            <exception cref="T:ContentProvider.ContentException">
                Thrown if content with the specified <paramref name="name"/> is not found in any of the
                registered sources.
            </exception>
        </member>
        <member name="M:ContentProvider.ContentSource.LoadAsStringAsync(System.String)">
            <summary>
                Attempts to load an item from the content source as a string, given its <paramref name="name"/>.
            </summary>
            <param name="name">The name of the content item to retrieve.</param>
            <returns>
                The content of the source as a string; otherwise <c>null</c> if the item is not found.
            </returns>
        </member>
        <member name="M:ContentProvider.ContentSource.LoadAsBinaryAsync(System.String)">
            <summary>
                Attempts to load an item from the content source as a byte array, given its <paramref name="name"/>.
            </summary>
            <param name="name">The name of the content item to retrieve.</param>
            <returns>
                The content of the source as a byte array; otherwise <c>null</c> if the item is not found.
            </returns>
        </member>
        <member name="T:ContentProvider.ContentSource`1">
            <summary>
                Represents a source from which to retrieve content.
                <para/>
                Examples include assembly embedded resources, files, web sites, etc.
            </summary>
        </member>
        <member name="T:ContentProvider.ContentSourceOptions">
            <summary>
                Base class for all content source options.
            </summary>
        </member>
        <member name="P:ContentProvider.ContentSourceOptions.NameTransformer">
            <summary>
                Gets or sets an optional delegate that can be used to transform the content entry names
                generated from the content source.
            </summary>
        </member>
        <member name="P:ContentProvider.EmbeddedResources.ResourceContentSourceOptions.FileExtension">
            <summary>
                Gets or sets the file extension to filter embedded resources. If not specified, all
                embedded resources are considered.
            </summary>
        </member>
        <member name="P:ContentProvider.EmbeddedResources.ResourceContentSourceOptions.RootNamespace">
            <summary>
                Gets or sets the namespace to filter embedded resources. If not specified, all embedded
                resources are considered.
            </summary>
        </member>
        <member name="P:ContentProvider.EmbeddedResources.ResourceContentSourceOptions.KeepExtension">
            <summary>
                Gets or sets a value indicating whether to keep the file extension in the content name.
            </summary>
        </member>
        <member name="M:ContentProvider.SourceBuilderExtensions.ResourcesIn(ContentProvider.ContentSourceBuilder,System.Reflection.Assembly,System.Action{ContentProvider.EmbeddedResources.ResourceContentSourceOptionsBuilder})">
            <summary>
                Registers a <see cref="T:ContentProvider.ContentSource"/> for content from embedded resources in the specified
                assemblies.
            </summary>
            <param name="builder">The <see cref="T:ContentProvider.ContentSourceBuilder"/> instance.</param>
            <param name="assembly">The assembly that contains the embedded resources.</param>
            <param name="sourceBuilderAction">Optional delegate to customize the content source.</param>
            <returns>An instance of <see cref="T:ContentProvider.ContentBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="builder"/> or <paramref name="assembly"/> parameters are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:ContentProvider.SourceBuilderExtensions.FilesIn(ContentProvider.ContentSourceBuilder,System.String,System.Action{ContentProvider.Files.FileContentSourceBuilder})">
            <summary>
                Registers a <see cref="T:ContentProvider.ContentSource"/> for content from files on the file system.
            </summary>
            <param name="builder">The <see cref="T:ContentProvider.ContentSourceBuilder"/> instance.</param>
            <param name="baseDirectory">The base directory to retrieve the files from.</param>
            <param name="sourceBuilderAction">Delegate to setup options for registering the content source.</param>
            <returns>An instance of <see cref="T:ContentProvider.ContentSourceBuilder"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="builder"/> parameter is <c>null</c>.
            </exception>
        </member>
        <member name="T:ContentProvider.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.ContentEntryNotFound">
            <summary>
              Looks up a localized string similar to Could not find content entry {0} under the {1} content..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.FilesInvalidBaseDirectory">
            <summary>
              Looks up a localized string similar to Specify a valid base directory..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.FilesMissingBaseDirectory">
            <summary>
              Looks up a localized string similar to The base directory {0} does not exist..
            </summary>
        </member>
        <member name="P:ContentProvider.Errors.InvalidContentSetName">
            <summary>
              Looks up a localized string similar to Specify a valid name for the content set..
            </summary>
        </member>
        <member name="P:ContentProvider.Files.FileContentSourceOptions.SearchPattern">
            <summary>
                Gets or sets the search string to match against the names of the files. This parameter can
                contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't
                support regular expressions.
                <para/>
                The default is <c>*</c>.
            </summary>
        </member>
        <member name="P:ContentProvider.Files.FileContentSourceOptions.SearchOption">
            <summary>
                Gets or sets an enumeration value that specified whether the search operation should include
                all subdirectories or only the current directory.
            </summary>
        </member>
        <member name="P:ContentProvider.Files.FileContentSourceOptions.KeepExtension">
            <summary>
                Gets or sets a value indicating whether to keep the file extension in the content name.
            </summary>
        </member>
        <member name="M:ContentProvider.IContentManager.GetContentSet(System.String)">
            <summary>
                Returns the <see cref="T:ContentProvider.IContentSet"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The content set name.</param>
            <returns>The <see cref="T:ContentProvider.IContentSet"/> instance, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:ContentProvider.IContentSet">
            <summary>
                Represents a named set of contents, consisting of a primary content source and zero or more
                fallback sources.
            </summary>
        </member>
        <member name="M:ContentProvider.IContentSet.GetAsStringAsync(System.String)">
            <summary>
                Gets the value of the content entry named <paramref name="name"/> as a string.
            </summary>
            <param name="name">The content entry name.</param>
            <returns>The content value as a string, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:ContentProvider.IContentSet.GetAsBinaryAsync(System.String)">
            <summary>
                Gets the value of the content entry named <paramref name="name"/> as a byte array.
            </summary>
            <param name="name">The content entry name.</param>
            <returns>The content value as a byte array, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:ContentProvider.IContentSet.GetAsString(System.String)">
            <summary>
                Gets the value of the content entry named <paramref name="name"/> as a string.
            </summary>
            <param name="name">The content entry name.</param>
            <returns>The content value as a string, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:ContentProvider.IContentSet.GetAsBinary(System.String)">
            <summary>
                Gets the value of the content entry named <paramref name="name"/> as a byte array.
            </summary>
            <param name="name">The content entry name.</param>
            <returns>The content value as a byte array, if found; otherwise <c>null</c>.</returns>
        </member>
    </members>
</doc>
